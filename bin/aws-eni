#!/usr/bin/env ruby
require 'gli'
require 'aws-eni'

include GLI::App

program_desc 'Manage and sync local network config with AWS Elastic Network Interfaces'

version Aws::ENI::VERSION

subcommand_option_handling :normal
arguments :strict
sort_help :manually

# global options

desc 'Display all system commands and warnings'
switch [:v,:verbose], negatable: false

pre do |opt|
  Aws::ENI::IFconfig.verbose = opt[:verbose]
  true
end

# commands

desc 'List current interface configuration'
long_desc %{
  List information about a set of interfaces including interface id, interface
  name, MAC address, and a list of primary and secondary ip addresses along with
  any public ips associated with them.

  Use the optional filter argument to limit the listing to interfaces with a
  matching name, interface id, subnet id, or MAC address (default 'all').
}
arg 'filter', :optional
command [:list,:ls] do |c|
  c.action do |global,opts,args|
    args.delete('all')
    Aws::ENI.list(args.first).each do |interface|
      print "#{interface[:name]}:"
      print "\tID #{interface[:interface_id]}"
      print "  HWaddr #{interface[:hwaddr]}"
      print "  Status " << (interface[:enabled] ? "UP" : "DOWN") << "\n"
      interface[:local_ips].each do |local_ip|
        if interface[:public_ips][local_ip]
          puts "\t#{local_ip} => #{interface[:public_ips][local_ip]}"
        else
          puts "\t#{local_ip}"
        end
      end
    end
    puts "\ninterface config is out of sync" if Aws::ENI.configure(nil, dry_run: true) > 0
  end
end

desc 'Configure network interfaces'
long_desc %{
  Syncronize configuration for a set of interfaces to match their configuration
  on AWS by managing secondary ips, routes, and rules.

  Use the optional filter argument to limit this action to interfaces with a
  matching name, interface id, subnet id, or MAC address (default 'all').
}
arg 'filter', :optional
command [:config,:conf] do |c|
  c.action do |global,opts,args|
    args.delete('all')
    if Aws::ENI.configure(args.first) != 0
      puts 'synchronized interface config'
    else
      puts 'network interface config already in sync'
    end
  end
end

desc 'Remove custom configuration from network interfaces'
long_desc %{
  Remove custom configuration for a set of interfaces removing any custom ips,
  routes, and rules previously added (the 'eth0' primary ip is always left
  untouched for safety).

  Use the optional filter argument to limit this action to interfaces with a
  matching name, interface id, subnet id, or MAC address (default 'all').
}
arg 'filter', :optional
command [:deconfig,:deconf] do |c|
  c.action do |global,opts,args|
    args.delete('all')
    Aws::ENI.deconfigure(args.first)
  end
end

desc 'Enable network interface'
long_desc %{
  Enable one or more network interfaces (similar to 'ifup').

  Specify one name, interface id, subnet id, or MAC address to enable any
  matching interfaces, or specify 'all' to enable all interfaces.
}
arg 'filter'
command [:enable,:up] do |c|
  c.action do |global,opts,args|
    args.delete('all')
    Aws::ENI.IFconfig.filter(args.first).each(&:enable)
  end
end

desc 'Disable network interface'
long_desc %{
  Disable one or more network interfaces (similar to 'ifdown').

  Specify one name, interface id, subnet id, or MAC address to disable any
  matching interfaces, or specify 'all' to disable all interfaces.

  eth0 cannot be disabled.
}
arg 'filter'
command [:disable,:down] do |c|
  c.action do |global,opts,args|
    args.delete('all')
    Aws::ENI.IFconfig.filter(args.first).each do |dev|
      if dev.name == 'eth0'
        warn 'skipping eth0'
      else
        dev.disable
      end
    end
  end
end

# error handling

on_error do |exception|
  if Aws::ENI::PermissionError === exception
    warn "error: This action requires super-user privileges (try sudo)"
    false
  else
    true
  end
end

exit run(ARGV)
