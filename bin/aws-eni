#!/usr/bin/env ruby

require 'aws-eni'

begin
  case ARGV[0]

  # list command
  when 'list'
    Aws::ENI.list(ARGV[1]).each do |interface|
      puts "#{interface[:name]}:\t" +
           "ID #{interface[:interface_id]}  " +
           "HWaddr #{interface[:hwaddr]}  " +
           "Status " + (interface[:enabled] ? "UP" : "DOWN")
      interface[:local_ips].each do |local_ip|
        if interface[:public_ips][local_ip]
          puts "\t#{local_ip} => #{interface[:public_ips][local_ip]}"
        else
          puts "\t#{local_ip}"
        end
      end
    end
    puts "\ninterface config is out of sync" if Aws::ENI.configure(nil, dry_run: true) > 0

  # sync command
  when 'config', 'configure'
    if Aws::ENI.configure(ARGV[1]) != 0
      puts 'synchronized interface config'
    else
      puts 'network interface config already in sync'
    end

  # sync command
  when 'deconfig', 'deconfigure'
    Aws::ENI.deconfigure(ARGV[1])

  # add command
  when 'add'
    @add = Aws::ENI.add(ARGV[1], ARGV[2])
    puts "added #{@add['device']} with private ip #{@add['private_ip']}"

  # remove command
  when 'remove'
    @remove = Aws::ENI.remove(ARGV[1], ARGV[2], ARGV[3])
    if @remove['release'] == true
      puts "removed #{@remove['private_ip']} and dissociated #{remove['public_ip']} from #{@remove['device']}"
    else
      puts "removed #{@remove['private_ip']} from #{@remove['device']}"
    end

  # assoc command
  when 'associate'
    @assoc = Aws::ENI.assoc(ARGV[1], ARGV[2])
    puts "associated #{@assoc['private_ip']} => #{@assoc['public_ip']}"

  else
    abort "Unknown command: #{ARGV[0]}"
  end


# handle library exceptions
rescue Aws::ENI::Error => e
  abort "Error: " + e.message
end
